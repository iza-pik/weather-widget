{"version":3,"sources":["components/InputField/index.tsx","components/Overlay/index.tsx","components/Form/index.tsx","constants/index.ts","utilities/getTime.ts","assets/clouds.jpg","components/WeatherCard/index.tsx","components/CurrentWeather/index.tsx","assets/sun.svg","components/Spinner/index.tsx","components/ForecastCard/index.tsx","components/ForecastDetails/index.tsx","components/Forecast/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputFieldWrapper","styled","div","InputField","id","label","inputProps","htmlFor","OverlayWrapper","props","isOn","Overlay","Button","button","FormWrapper","form","Form","onChange","onSubmit","value","useState","isFormVisible","setIsFormVisible","toggleForm","className","onClick","event","data-id","type","placeholder","city","checked","units","name","API_KEY","daysOftheWeek","getTime","ms","date","Date","padZero","getHours","getMinutes","n","WeatherCardWrapper","clouds","WeatherCard","query","weatherData","isMetric","queriedUnits","temp","Math","floor","src","weather","icon","alt","description","pressure","humidity","sunrise","sunset","CurrentWeatherWrapper","CurrentWeather","rotate","keyframes","SpinnerContent","sun","Spinner","ForecastCardWrapper","ForecastCard","forecastData","forecastDay","role","data-day-index","index","day","ForecastDetailsWrapper","ForecastDetails","details","ForecastWrapper","isExpanded","ForecastButton","Forecast","weeklyForecastData","showDetails","setShowDetails","isForecastExpanded","setIsForecastExpanded","onShowDetails","stopPropagation","clickedDay","currentTarget","dataset","dayIndex","nextDay","getDay","slice","map","i","Number","AppWrapper","App","setQuery","error","loading","data","setWeatherData","fetchLocalWeather","navigator","geolocation","getCurrentPosition","coords","fetch","latitude","longitude","then","response","ok","Error","json","fetchWeather","useEffect","queryString","catch","target","preventDefault","res","coord","lat","lon","current","daily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1fdf013.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputFieldWrapper = styled.div`\r\n  margin: 1vmin;\r\n  font-family: Helvetica, sans-serif;\r\n  font-size: 3vmin;\r\n  padding: 1vmin;\r\n  input {\r\n    background-color: bisque;\r\n    border-radius: 1vmin;\r\n    font-size: 3vmin;\r\n    margin: 1vmin;\r\n    padding: 0.75vmin;\r\n  }\r\n  input#submit {\r\n    background-color: goldenrod;\r\n    border-radius: 1vmin;\r\n    font-weight: bold;\r\n    font-size: 3vmin;\r\n  }\r\n  label {\r\n    text-shadow: 0 2px 2px darkred;\r\n  }\r\n`;\r\n\r\ninterface iInputField {\r\n  id: string;\r\n  label?: string;\r\n  checked?: boolean;\r\n  name?: string;\r\n  onChange?: any;\r\n  placeholder?: string;\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport const InputField: React.FC<iInputField> = ({\r\n  id,\r\n  label,\r\n  ...inputProps\r\n}) => {\r\n  return (\r\n    <InputFieldWrapper>\r\n      <label htmlFor={id}>\r\n        {label}\r\n        <input id={id} {...inputProps} />\r\n      </label>\r\n    </InputFieldWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const OverlayWrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: linear-gradient(navy 40%, lightblue);\r\n  transition: opacity 0.2s, z-index 0.2s;\r\n  opacity: ${(props: iOverlay) => (props.isOn ? 1 : 0)};\r\n  z-index: ${(props: iOverlay) => (props.isOn ? 99 : -1)};\r\n`;\r\n\r\nexport interface iOverlay {\r\n  isOn: boolean;\r\n}\r\n\r\nconst Overlay: React.FC<iOverlay> = (props) => <OverlayWrapper {...props} />;\r\n\r\nexport default Overlay;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iQuery } from \"../../App\";\r\nimport { InputField } from \"../InputField\";\r\nimport Overlay from \"../Overlay\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: navy;\r\n  border: none;\r\n  &:hover {\r\n    transform: scale(1.75);\r\n  }\r\n  font-size: 5vmin;\r\n  margin-right: 3vw;\r\n  margin-top: 5vh;\r\n  min-height: 10vmin;\r\n  min-width: 10vmin;\r\n  position: fixed;\r\n  right: 0;\r\n  top: 0;\r\n`;\r\n\r\nconst FormWrapper = styled.form`\r\n  min-height: 30vmin;\r\n  min-width: 75vw;\r\n  background-color: navy;\r\n  border-radius: 2vmin;\r\n  color: bisque;\r\n`;\r\n\r\nexport interface iForm {\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: React.FormEventHandler<HTMLFormElement>;\r\n  value: iQuery;\r\n}\r\n\r\nexport const Form: React.FC<iForm> = ({ onChange, onSubmit, value }) => {\r\n  const [isFormVisible, setIsFormVisible] = useState<boolean>(false);\r\n  const toggleForm = () => setIsFormVisible(!isFormVisible);\r\n  const curriedOnSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    toggleForm();\r\n    onSubmit(event);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button className=\"icon\" onClick={toggleForm}>\r\n        🔍\r\n      </Button>\r\n      <Overlay isOn={isFormVisible}>\r\n        <FormWrapper onSubmit={curriedOnSubmit}>\r\n          <InputField\r\n            onChange={onChange}\r\n            id=\"city\"\r\n            data-id=\"city\"\r\n            label=\"City: \"\r\n            type=\"text\"\r\n            placeholder=\"Insert the city\"\r\n            value={value.city}\r\n          />\r\n          <InputField id=\"submit\" type=\"submit\" value=\"Submit\" />\r\n          <InputField\r\n            checked={value.units === \"metric\"}\r\n            data-id=\"units\"\r\n            id=\"metric\"\r\n            label=\"Metric\"\r\n            type=\"radio\"\r\n            value=\"metric\"\r\n            name=\"units\"\r\n            onChange={onChange}\r\n          />\r\n          <InputField\r\n            data-id=\"units\"\r\n            id=\"imperial\"\r\n            label=\"Imperial\"\r\n            type=\"radio\"\r\n            value=\"imperial\"\r\n            name=\"units\"\r\n            onChange={onChange}\r\n          />\r\n        </FormWrapper>\r\n      </Overlay>\r\n    </>\r\n  );\r\n};\r\n","export const API_KEY = \"847c4dda05c3a22fb02d777556a5510f\";\r\n\r\nexport const daysOftheWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n","export const getTime = (ms: number) => {\r\n  const date = new Date(ms * 1000);\r\n  return `${padZero(date.getHours())}:${padZero(date.getMinutes())}`;\r\n};\r\n\r\nexport const padZero = (n: number): string => (n < 10 ? `0${n}` : `${n}`);\r\n","export default __webpack_public_path__ + \"static/media/clouds.a90bcbf0.jpg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iCurrent, iQuery } from \"../../App\";\r\nimport { getTime } from \"../../utilities/getTime\";\r\nimport clouds from \"../../assets/clouds.jpg\";\r\n\r\nexport const WeatherCardWrapper = styled.div`\r\n  background-image: url(${clouds});\r\n  background-size: cover;\r\n  background-position: bottom;\r\n  border-radius: 2vmin;\r\n  .city {\r\n    transition: all 0.4s ease-out;\r\n  }\r\n  color: black;\r\n  font-size: 3vmin;\r\n  font-weight: 900;\r\n  .icon {\r\n    min-width: 4vmax;\r\n    max-width: 10vmax;\r\n  }\r\n  .icon:hover {\r\n    transform: scale(1.75);\r\n  }\r\n  min-height: 50vmin;\r\n  min-width: 75vw;\r\n  padding-top: 2vmin;\r\n  ul {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n  }\r\n  text-shadow: 0 2px 2px white;\r\n  .temperature {\r\n    color: #0f0774;\r\n    font-size: 4vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .temperature-warm {\r\n    color: #550808;\r\n    font-size: 4vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .weather-data-box {\r\n    position: relative;\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nexport interface iWeatherCard {\r\n  query: iQuery;\r\n  weatherData: iCurrent;\r\n}\r\n\r\nexport const WeatherCard: React.FC<iWeatherCard> = ({ query, weatherData }) => {\r\n  const isMetric = query.queriedUnits === \"metric\";\r\n  return (\r\n    <WeatherCardWrapper>\r\n      <h2 className=\"city\">{query.city || \"Current location\"}</h2>\r\n      <div className=\"weather-data-box\">\r\n        <ul>\r\n          <li\r\n            className={\r\n              typeof weatherData?.temp !== \"undefined\"\r\n                ? weatherData?.temp > (isMetric ? 15 : 60)\r\n                  ? \"temperature-warm\"\r\n                  : \"temperature\"\r\n                : \"temperature\"\r\n            }\r\n          >\r\n            {Math.floor(weatherData?.temp)}\r\n            {isMetric ? \" °C\" : \" °F\"}\r\n          </li>\r\n          <img\r\n            src={`http://openweathermap.org/img/w/${weatherData?.weather[0]?.icon}.png`}\r\n            alt={`${weatherData?.weather[0]?.description} in ${query.city}`}\r\n            className=\"icon\"\r\n          />\r\n          <li>{`Pressure: ${weatherData?.pressure} hPa`}</li>\r\n          <li>{`Humidity: ${weatherData?.humidity}%`}</li>\r\n          <li>{`Sunrise: ${getTime(weatherData?.sunrise)}`}</li>\r\n          <li>{`Sunset: ${getTime(weatherData?.sunset)}`}</li>\r\n        </ul>\r\n      </div>\r\n    </WeatherCardWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iCurrent, iQuery } from \"../../App\";\r\nimport { WeatherCard } from \"../WeatherCard\";\r\n\r\nconst CurrentWeatherWrapper = styled.div``;\r\n\r\nexport const CurrentWeather: React.FC<{\r\n  weatherData: iCurrent;\r\n  query: iQuery;\r\n}> = (props) => {\r\n  return (\r\n    <CurrentWeatherWrapper>\r\n      <WeatherCard {...props} />\r\n    </CurrentWeatherWrapper>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/sun.42ddd9ac.svg\";","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport sun from \"../../assets/sun.svg\";\r\nimport Overlay from \"../Overlay\";\r\n\r\nexport const rotate = keyframes`\r\nfrom {\r\n  transform: rotate(0deg);\r\n}\r\n\r\nto {\r\n  transform: rotate(360deg);\r\n}\r\n`;\r\n\r\nexport const SpinnerContent = styled.div`\r\n  animation: ${rotate} 1s infinite;\r\n  width: 25vmin;\r\n  height: 25vmin;\r\n  background-image: url(${sun});\r\n  background-position: center;\r\n  background-size: contain;\r\n`;\r\n\r\nexport interface iSpinner {\r\n  isOn: boolean;\r\n}\r\n\r\nconst Spinner: React.FC<iSpinner> = (props) => (\r\n  <Overlay {...props}>\r\n    <SpinnerContent />\r\n  </Overlay>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iDaily, iQuery } from \"../../App\";\r\n\r\nexport const ForecastCardWrapper = styled.div`\r\n  background-color: bisque;\r\n  transition: background-color 0.3s linear;\r\n  border-radius: 2vmin;\r\n  color: black;\r\n  font-size: 3vmin;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: goldenrod;\r\n    transition: background-color 0.1s linear;\r\n  }\r\n  .icon {\r\n    min-width: 3vmax;\r\n    max-width: 8vmax;\r\n  }\r\n  .icon:hover {\r\n    transform: scale(1.75);\r\n  }\r\n  margin-top: 2vmin;\r\n  min-height: 28vmin;\r\n  min-width: 10vw;\r\n  ul {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n  }\r\n  text-shadow: 0 2px 2px white;\r\n  .temperature {\r\n    color: #0f0774;\r\n    font-size: 3vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .temperature-warm {\r\n    color: #550808;\r\n    font-size: 3vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .weather-data-box {\r\n    position: relative;\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nexport interface iWeatherCard {\r\n  forecastData: iDaily;\r\n  forecastDay: { name: string; index: number };\r\n  onClick: any;\r\n  query: iQuery;\r\n}\r\n\r\nexport const ForecastCard: React.FC<iWeatherCard> = ({\r\n  forecastData,\r\n  forecastDay,\r\n  onClick,\r\n  query,\r\n}) => {\r\n  const isMetric = query.queriedUnits === \"metric\";\r\n  return (\r\n    <ForecastCardWrapper\r\n      role=\"button\"\r\n      data-day-index={forecastDay.index}\r\n      onClick={onClick}\r\n    >\r\n      <h4>{forecastDay.name}</h4>\r\n      <div className=\"weather-data-box\">\r\n        <ul>\r\n          <li\r\n            className={\r\n              typeof forecastData?.temp !== \"undefined\"\r\n                ? forecastData?.temp.day > (isMetric ? 15 : 60)\r\n                  ? \"temperature-warm\"\r\n                  : \"temperature\"\r\n                : \"temperature\"\r\n            }\r\n          >\r\n            {Math.floor(forecastData?.temp.day)}\r\n            {isMetric ? \" °C\" : \" °F\"}\r\n          </li>\r\n          <li>\r\n            <img\r\n              src={`http://openweathermap.org/img/w/${forecastData?.weather[0]?.icon}.png`}\r\n              alt={`${forecastData?.weather[0]?.description} in ${query.city}`}\r\n              className=\"icon\"\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </ForecastCardWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { iDaily } from \"../../App\";\r\nimport { getTime } from \"../../utilities/getTime\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ForecastDetailsWrapper = styled.div`\r\n  background-color: bisque;\r\n  border-radius: 2vmin;\r\n  color: black;\r\n  font-size: 2.5vmin;\r\n  font-weight: 700;\r\n  margin-top: 2vmin;\r\n  min-height: 10vmin;\r\n  min-width: 73vw;\r\n  padding: 2vmin;\r\n  h3 {\r\n    display: flex;\r\n    position: fixed;\r\n  }\r\n`;\r\n\r\nexport const ForecastDetails: React.FC<{ details: iDaily }> = ({ details }) => {\r\n  return (\r\n    <ForecastDetailsWrapper>\r\n      <h3>More details... </h3>\r\n      {/* <div>{ForecastCard.forecastDay.name}</div> */}\r\n      <div>{`Pressure: ${details?.pressure} hPa`}</div>\r\n      <div>{`Humidity: ${details?.humidity}%`}</div>\r\n      <div>{`Sunrise: ${getTime(details?.sunrise)}`}</div>\r\n      <div>{`Sunset: ${getTime(details?.sunset)}`}</div>\r\n    </ForecastDetailsWrapper>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iDaily, iQuery } from \"../../App\";\r\nimport { daysOftheWeek } from \"../../constants\";\r\nimport { ForecastCard } from \"../ForecastCard\";\r\nimport { ForecastDetails } from \"../ForecastDetails\";\r\n\r\nexport const ForecastWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  min-width: 75vw;\r\n  overflow: hidden;\r\n  max-height: ${(props: iForecastWrapper) =>\r\n    props.isExpanded ? \"100vh\" : \"0\"};\r\n  transition: max-height 0.2s ease-in-out;\r\n`;\r\n\r\nexport const ForecastButton = styled.div`\r\n  background-color: goldenrod;\r\n  border: 2px solid rgb(118, 118, 118);\r\n  border-radius: 1vmin;\r\n  color: black;\r\n  font-weight: bold;\r\n  margin: 1vmin;\r\n  font-family: Helvetica, sans-serif;\r\n  font-size: 3vmin;\r\n  padding: 0.75vmin;\r\n`;\r\n\r\nexport interface iForecastWrapper {\r\n  isExpanded: boolean;\r\n}\r\n\r\nexport const Forecast: React.FC<{\r\n  query: iQuery;\r\n  weeklyForecastData: iDaily[];\r\n}> = ({ query, weeklyForecastData }) => {\r\n  const [showDetails, setShowDetails] = useState(null);\r\n  const [isForecastExpanded, setIsForecastExpanded] = useState(false);\r\n  const onShowDetails = (event: any) => {\r\n    event.stopPropagation();\r\n    const clickedDay = event.currentTarget.dataset.dayIndex;\r\n    setShowDetails(clickedDay !== showDetails ? clickedDay : null);\r\n  };\r\n  const toggleExpandForecast = () => setIsForecastExpanded(!isForecastExpanded);\r\n  const nextDay = new Date().getDay() + 1;\r\n\r\n  return (\r\n    <>\r\n      {!isForecastExpanded && (\r\n        <ForecastButton onClick={toggleExpandForecast}>\r\n          Show full forecast...\r\n        </ForecastButton>\r\n      )}\r\n      <ForecastWrapper isExpanded={isForecastExpanded}>\r\n        {weeklyForecastData.slice(1).map((forecastData, i) => {\r\n          const forecastDay = daysOftheWeek[(nextDay + i) % 7];\r\n          return (\r\n            <ForecastCard\r\n              key={forecastDay}\r\n              forecastDay={{ name: forecastDay, index: i + 1 }}\r\n              forecastData={forecastData}\r\n              onClick={onShowDetails}\r\n              query={query}\r\n            />\r\n          );\r\n        })}\r\n      </ForecastWrapper>\r\n      {showDetails !== null && (\r\n        <ForecastDetails details={weeklyForecastData[Number(showDetails)]} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Form } from \"./components/Form\";\r\nimport { API_KEY } from \"./constants\";\r\nimport { CurrentWeather } from \"./components/CurrentWeather\";\r\nimport Spinner from \"./components/Spinner\";\r\nimport { Forecast } from \"./components/Forecast\";\r\n\r\nconst AppWrapper = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n  align-items: center;\r\n  background: linear-gradient(navy 40%, lightblue);\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-family: Helvetica, sans-serif;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  padding-top: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport interface iCurrent {\r\n  sunrise: number;\r\n  sunset: number;\r\n  temp: number;\r\n  pressure: number;\r\n  humidity: number;\r\n  weather: iWeather[];\r\n}\r\n\r\nexport interface iDaily {\r\n  sunrise: number;\r\n  sunset: number;\r\n  temp: iTemp;\r\n  pressure: number;\r\n  humidity: number;\r\n  weather: iWeather[];\r\n}\r\n\r\nexport interface iTemp {\r\n  day: number;\r\n}\r\n\r\nexport interface iWeather {\r\n  description: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface iWeatherData {\r\n  error: string;\r\n  loading: boolean;\r\n  data: { current: iCurrent; daily: iDaily[] } | null;\r\n}\r\n\r\nexport interface iQuery {\r\n  city: string;\r\n  units: string;\r\n  queriedUnits: string;\r\n}\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState<iQuery>({\r\n    city: \"\",\r\n    units: \"metric\",\r\n    queriedUnits: \"metric\",\r\n  });\r\n  const [weatherData, setWeatherData] = useState<iWeatherData>({\r\n    error: \"\",\r\n    loading: false,\r\n    data: null,\r\n  });\r\n  const fetchLocalWeather = (): void => {\r\n    navigator.geolocation?.getCurrentPosition(\r\n      ({ coords }: any) => {\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}&units=${query.units}`\r\n        )\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(\"Unable to fetch data\");\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((response) => {\r\n            fetchWeather(\r\n              `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}&units=${query.units}`\r\n            );\r\n            setQuery({\r\n              ...query,\r\n              city: response.name,\r\n              queriedUnits: query.units,\r\n            });\r\n          });\r\n      },\r\n      () =>\r\n        setWeatherData({\r\n          data: null,\r\n          loading: false,\r\n          error: \"Unable to get user location. Please search manually.\",\r\n        })\r\n    );\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(fetchLocalWeather, []);\r\n\r\n  const fetchWeather = (queryString: string): void => {\r\n    fetch(queryString)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Unable to fetch data\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setWeatherData({ ...weatherData, data, loading: false, error: \"\" });\r\n      })\r\n      .catch(() => {\r\n        setWeatherData({\r\n          data: null,\r\n          error: `Unable to fetch information for ${query.city}`,\r\n          loading: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setWeatherData({ ...weatherData, loading: true });\r\n    if (query.city) {\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${query.city}&appid=${API_KEY}&units=${query.units}`\r\n      )\r\n        .then((res) => {\r\n          if (!res.ok) throw new Error(\"Unable to fetch city location\");\r\n          return res.json();\r\n        })\r\n        .then(({ coord }) => {\r\n          setQuery({ ...query, queriedUnits: query.units });\r\n          fetchWeather(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${coord.lat}&lon=${coord.lon}&appid=${API_KEY}&units=${query.units}`\r\n          );\r\n        });\r\n    } else {\r\n      fetchLocalWeather();\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setQuery({ ...query, [`${event.target.dataset.id}`]: event.target.value });\r\n  };\r\n\r\n  return (\r\n    <AppWrapper>\r\n      <Spinner isOn={weatherData.loading} />\r\n      <Form onChange={onChangeHandler} onSubmit={onSubmit} value={query} />\r\n      {weatherData.data && (\r\n        <CurrentWeather weatherData={weatherData.data.current} query={query} />\r\n      )}\r\n      {weatherData.data && (\r\n        <Forecast weeklyForecastData={weatherData.data.daily} query={query} />\r\n      )}\r\n      {weatherData.error && <h2>{weatherData.error}</h2>}\r\n    </AppWrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}