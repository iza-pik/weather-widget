{"version":3,"sources":["components/InputField/index.tsx","components/Form/index.tsx","constants/index.ts","utilities/getTime.ts","assets/clouds.jpg","components/WeatherCard/index.tsx","components/CurrentWeather/index.tsx","assets/sun.svg","components/Spinner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputFieldWrapper","styled","div","InputField","id","label","inputProps","htmlFor","FormWrapper","form","Form","onChange","onSubmit","value","data-id","type","placeholder","city","checked","units","name","API_KEY","getTime","ms","date","Date","padZero","getHours","getMinutes","n","WeatherCardWrapper","clouds","WeatherCard","query","weatherData","className","main","temp","Math","floor","queriedUnits","src","weather","icon","alt","description","pressure","humidity","sys","sunrise","sunset","CurrentWeatherWrapper","CurrentWeather","props","SpinnerWrapper","isOn","rotate","keyframes","SpinnerContent","sun","Spinner","AppWrapper","App","useState","setQuery","error","loading","data","setWeatherData","fetchLocalWeather","navigator","geolocation","getCurrentPosition","coords","fetchWeather","latitude","longitude","useEffect","queryString","fetch","then","response","ok","Error","json","catch","event","target","dataset","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66a51d04.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputFieldWrapper = styled.div`\r\n  margin: 1vmin;\r\n  font-family: Helvetica, sans-serif;\r\n  font-size: 3vmin;\r\n  padding: 1vmin;\r\n  input {\r\n    background-color: bisque;\r\n    border-radius: 1vmin;\r\n    font-size: 3vmin;\r\n    margin: 1vmin;\r\n  }\r\n  input#submit {\r\n    background-color: goldenrod;\r\n    border-radius: 1vmin;\r\n    font-weight: bold;\r\n    font-size: 3vmin;\r\n  }\r\n  label {\r\n    text-shadow: 0 2px 2px darkred;\r\n  }\r\n`;\r\n\r\ninterface iInputField {\r\n  id: string;\r\n  label?: string;\r\n  checked?: boolean;\r\n  name?: string;\r\n  onChange?: any;\r\n  placeholder?: string;\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport const InputField: React.FC<iInputField> = ({\r\n  id,\r\n  label,\r\n  ...inputProps\r\n}) => {\r\n  return (\r\n    <InputFieldWrapper>\r\n      <label htmlFor={id}>\r\n        {label}\r\n        <input id={id} {...inputProps} />\r\n      </label>\r\n    </InputFieldWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iQuery } from \"../../App\";\r\nimport { InputField } from \"../InputField\";\r\n\r\nconst FormWrapper = styled.form`\r\n  min-height: 30vmin;\r\n  min-width: 75vw;\r\n  background-color: navy;\r\n  border-radius: 2vmin 2vmin 0 0;\r\n  color: bisque;\r\n`;\r\n\r\nexport interface iForm {\r\n  onChange: any;\r\n  onSubmit: any;\r\n  value: iQuery;\r\n}\r\n\r\nexport const Form: React.FC<iForm> = ({ onChange, onSubmit, value }) => (\r\n  <FormWrapper onSubmit={onSubmit}>\r\n    <InputField\r\n      onChange={onChange}\r\n      id=\"city\"\r\n      data-id=\"city\"\r\n      label=\"City: \"\r\n      type=\"text\"\r\n      placeholder=\"Insert the city\"\r\n      value={value.city}\r\n    />\r\n    <InputField id=\"submit\" type=\"submit\" value=\"Submit\" />\r\n    <InputField\r\n      checked={value.units === \"metric\"}\r\n      data-id=\"units\"\r\n      id=\"metric\"\r\n      label=\"Metric\"\r\n      type=\"radio\"\r\n      value=\"metric\"\r\n      name=\"units\"\r\n      onChange={onChange}\r\n    />\r\n    <InputField\r\n      data-id=\"units\"\r\n      id=\"imperial\"\r\n      label=\"Imperial\"\r\n      type=\"radio\"\r\n      value=\"imperial\"\r\n      name=\"units\"\r\n      onChange={onChange}\r\n    />\r\n  </FormWrapper>\r\n);\r\n","export const API_KEY = \"847c4dda05c3a22fb02d777556a5510f\";\r\n","export const getTime = (ms: number) => {\r\n  const date = new Date(ms * 1000);\r\n  return `${padZero(date.getHours())}:${padZero(date.getMinutes())}`;\r\n};\r\n\r\nexport const padZero = (n: number): string => (n < 10 ? `0${n}` : `${n}`);\r\n","export default __webpack_public_path__ + \"static/media/clouds.a90bcbf0.jpg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iQuery, iData } from \"../../App\";\r\nimport { getTime } from \"../../utilities/getTime\";\r\nimport clouds from \"../../assets/clouds.jpg\";\r\n\r\nexport const WeatherCardWrapper = styled.div`\r\n  background-image: url(${clouds});\r\n  background-size: cover;\r\n  background-position: bottom;\r\n  border-radius: 0 0 2vmin 2vmin;\r\n  .city {\r\n    transition: 0.4s ease-out;\r\n  }\r\n  color: black;\r\n  font-size: 3vmin;\r\n  font-weight: 900;\r\n  .icon {\r\n    min-width: 4vmax;\r\n    max-width: 10vmax;\r\n  }\r\n  .icon:hover {\r\n    transform: scale(1.75);\r\n  }\r\n  min-height: 65vmin;\r\n  min-width: 75vw;\r\n  padding-top: 2vmin;\r\n  ul {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n  }\r\n  text-shadow: 0 2px 2px white;\r\n  .temperature {\r\n    color: #0f0774;\r\n    font-size: 4vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .temperature-warm {\r\n    color: #550808;\r\n    font-size: 4vmin;\r\n    font-weight: bolder;\r\n  }\r\n  .weather-data-box {\r\n    position: relative;\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nexport interface iWeatherCard {\r\n  query: iQuery;\r\n  weatherData: iData;\r\n}\r\n\r\nexport const WeatherCard: React.FC<iWeatherCard> = ({ query, weatherData }) => {\r\n  return (\r\n    <WeatherCardWrapper>\r\n      <h2 className=\"city\">{weatherData.name || \"current location\"}</h2>\r\n      <div className=\"weather-data-box\">\r\n        <ul>\r\n          <li\r\n            className={\r\n              typeof weatherData?.main?.temp !== \"undefined\"\r\n                ? weatherData?.main?.temp > 15\r\n                  ? \"temperature-warm\"\r\n                  : \"temperature\"\r\n                : \"temperature\"\r\n            }\r\n          >\r\n            {Math.floor(weatherData?.main?.temp)}\r\n            {query.queriedUnits === \"metric\" ? \" °C\" : \" °F\"}\r\n          </li>\r\n          <img\r\n            src={`http://openweathermap.org/img/w/${weatherData?.weather[0]?.icon}.png`}\r\n            alt={`${weatherData?.weather[0]?.description} in ${query.city}`}\r\n            className=\"icon\"\r\n          />\r\n          <li>{`Pressure: ${weatherData?.main?.pressure} hPa`}</li>\r\n          <li>{`Humidity: ${weatherData?.main?.humidity}%`}</li>\r\n          <li>{`Sunrise: ${getTime(weatherData?.sys?.sunrise)}`}</li>\r\n          <li>{`Sunset: ${getTime(weatherData?.sys?.sunset)}`}</li>\r\n        </ul>\r\n      </div>\r\n    </WeatherCardWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iWeatherCard, WeatherCard } from \"../WeatherCard\";\r\n\r\nconst CurrentWeatherWrapper = styled.div``;\r\n\r\nexport const CurrentWeather: React.FC<iWeatherCard> = (props) => {\r\n  return (\r\n    <CurrentWeatherWrapper>\r\n      <WeatherCard {...props} />\r\n    </CurrentWeatherWrapper>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/sun.42ddd9ac.svg\";","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport sun from \"../../assets/sun.svg\";\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: blue;\r\n  transition: opacity 0.2s, z-index 0.2s;\r\n  opacity: ${(props: iSpinner) => (props.isOn ? 1 : 0)};\r\n  z-index: ${(props: iSpinner) => (props.isOn ? 99 : -1)};\r\n`;\r\n\r\nexport const rotate = keyframes`\r\nfrom {\r\n  transform: rotate(0deg);\r\n}\r\n\r\nto {\r\n  transform: rotate(360deg);\r\n}\r\n`;\r\n\r\nexport const SpinnerContent = styled.div`\r\n  animation: ${rotate} 1s infinite;\r\n  width: 25vmin;\r\n  height: 25vmin;\r\n  background-image: url(${sun});\r\n  background-position: center;\r\n  background-size: contain;\r\n`;\r\n\r\nexport interface iSpinner {\r\n  isOn: boolean;\r\n}\r\n\r\nconst Spinner: React.FC<iSpinner> = (props) => (\r\n  <SpinnerWrapper {...props}>\r\n    <SpinnerContent />\r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Form } from \"./components/Form\";\nimport { API_KEY } from \"./constants\";\nimport { CurrentWeather } from \"./components/CurrentWeather\";\nimport Spinner from \"./components/Spinner\";\n\nconst AppWrapper = styled.div`\n  position: relative;\n  align-items: center;\n  background: linear-gradient(navy 40%, lightblue);\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-family: Helvetica, sans-serif;\n  justify-content: center;\n  min-height: 120vh;\n  padding-top: 0;\n  text-align: center;\n`;\n\nexport interface iClouds {\n  all: number;\n}\n\nexport interface iCoord {\n  lon: number;\n  lat: number;\n}\n\nexport interface iData {\n  coord: iCoord;\n  weather: iWeather[];\n  base: string;\n  main: iMain;\n  visibility: number;\n  wind: iWind;\n  clouds: iClouds;\n  dt: number;\n  sys: iSys;\n  id: number;\n  name: string;\n  cod: number;\n}\n\nexport interface iMain {\n  temp: number;\n  pressure: number;\n  humidity: number;\n  temp_min: number;\n  temp_max: number;\n}\n\nexport interface iSys {\n  type: number;\n  id: number;\n  message?: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\nexport interface iWeather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\nexport interface iWeatherData {\n  error: string;\n  loading: boolean;\n  data: iData | null;\n}\n\nexport interface iWind {\n  speed: number;\n  deg: number;\n  gust: number;\n}\n\nexport interface iQuery {\n  city: string;\n  units: string;\n  queriedUnits: string;\n}\n\nfunction App() {\n  const [query, setQuery] = useState<iQuery>({\n    city: \"\",\n    units: \"metric\",\n    queriedUnits: \"\",\n  });\n  const [weatherData, setWeatherData] = useState<iWeatherData>({\n    error: \"\",\n    loading: false,\n    data: null,\n  });\n  const fetchLocalWeather = (): void => {\n    navigator.geolocation?.getCurrentPosition(\n      ({ coords }: any) => {\n        fetchWeather(\n          `https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}&units=${query.units}`\n        );\n      },\n      () =>\n        setWeatherData({\n          ...weatherData,\n          loading: false,\n          error: \"Unable to get user location. Please search manually.\",\n        })\n    );\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(fetchLocalWeather, []);\n\n  const fetchWeather = (queryString: string): void => {\n    fetch(queryString)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Unable to fetch data\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setWeatherData({ ...weatherData, data, loading: false });\n        setQuery({ ...query, queriedUnits: query.units });\n      })\n      .catch((error) => {\n        setWeatherData({ ...weatherData, error, loading: false });\n      });\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setWeatherData({ ...weatherData, loading: true });\n    if (query.city) {\n      fetchWeather(\n        `https://api.openweathermap.org/data/2.5/weather?q=${query.city}&appid=${API_KEY}&units=${query.units}`\n      );\n    } else {\n      fetchLocalWeather();\n    }\n  };\n\n  const onChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setQuery({ ...query, [`${event.target.dataset.id}`]: event.target.value });\n  };\n\n  return (\n    <AppWrapper>\n      <Spinner isOn={weatherData.loading} />\n      <Form onChange={onChangeHandler} onSubmit={onSubmit} value={query} />\n      {weatherData.data && (\n        <CurrentWeather weatherData={weatherData.data} query={query} />\n      )}\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}